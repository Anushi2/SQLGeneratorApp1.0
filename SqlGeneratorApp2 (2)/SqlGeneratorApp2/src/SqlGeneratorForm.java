/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Anushika
 */
import java.sql.*;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class SqlGeneratorForm extends javax.swing.JFrame {

    /**
     * Creates new form SqlGeneratorForm
     */
    public SqlGeneratorForm() {
        initComponents();
         initializeComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectAllCheckBox = new javax.swing.JCheckBox();
        whereComboBox = new javax.swing.JComboBox<>();
        whereCheckBox = new javax.swing.JCheckBox();
        equalRadioButton = new javax.swing.JRadioButton();
        likeRadioButton = new javax.swing.JRadioButton();
        whereCondititonTextField = new javax.swing.JTextField();
        selectColumnComboBox = new javax.swing.JComboBox<>();
        addButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        selectColumnName = new javax.swing.JTextArea();
        generateSelectSqlButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        clearButton = new javax.swing.JButton();
        insertComboBox = new javax.swing.JComboBox<>();
        generateInsertSqlButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        sqlTextArea = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        resultsTable = new javax.swing.JTable();
        executeButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        fromComboBox = new javax.swing.JComboBox<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        insertColumnTable = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        insertValuesTable = new javax.swing.JTable();
        deleteButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        selectAllCheckBox.setText("*");
        selectAllCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllCheckBoxActionPerformed(evt);
            }
        });

        whereComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "book_id", "title","author","price", "stock" }));
        whereComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                whereComboBoxActionPerformed(evt);
            }
        });

        whereCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                whereCheckBoxActionPerformed(evt);
            }
        });

        equalRadioButton.setText("=");
        equalRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equalRadioButtonActionPerformed(evt);
            }
        });

        likeRadioButton.setText("LIKE");
        likeRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                likeRadioButtonActionPerformed(evt);
            }
        });

        whereCondititonTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                whereCondititonTextFieldActionPerformed(evt);
            }
        });

        selectColumnComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "book_id", "title","author","price", "stock" }));

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        selectColumnName.setColumns(20);
        selectColumnName.setRows(5);
        jScrollPane1.setViewportView(selectColumnName);

        generateSelectSqlButton.setText("GenerateSQL");
        generateSelectSqlButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateSelectSqlButtonActionPerformed(evt);
            }
        });

        clearButton.setText("clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        insertComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "book", "book_customers", "order" }));
        insertComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertComboBoxActionPerformed(evt);
            }
        });

        generateInsertSqlButton.setText("GenerateSQL");
        generateInsertSqlButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateInsertSqlButtonActionPerformed(evt);
            }
        });

        sqlTextArea.setColumns(20);
        sqlTextArea.setRows(5);
        jScrollPane2.setViewportView(sqlTextArea);

        resultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Book_id", "Title", "Author", "Price", "Stock"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(resultsTable);

        executeButton.setText("Execute");
        executeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeButtonActionPerformed(evt);
            }
        });

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("SELECT");

        jLabel2.setText("FROM");

        jLabel3.setText("WHERE");

        jLabel4.setText("INSERT INTO");

        jLabel5.setText("VALUES");

        jLabel6.setText("SQL Statement");

        fromComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "book", "book_customers", "order" }));
        fromComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromComboBoxActionPerformed(evt);
            }
        });

        insertColumnTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Column"
            }
        ));
        jScrollPane5.setViewportView(insertColumnTable);

        insertValuesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Values"
            }
        ));
        jScrollPane6.setViewportView(insertValuesTable);

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(102, 102, 102)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(selectColumnComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(318, 318, 318)
                        .addComponent(generateSelectSqlButton, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(72, 72, 72)
                                .addComponent(selectAllCheckBox)
                                .addGap(44, 44, 44)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(fromComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(42, 42, 42)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(whereCheckBox)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addGap(33, 33, 33)
                                        .addComponent(whereComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(likeRadioButton)
                                    .addComponent(equalRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(whereCondititonTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14))))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(insertComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51)
                        .addComponent(generateInsertSqlButton, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 622, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(executeButton, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE)
                                    .addComponent(refreshButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 824, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 814, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(37, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(deleteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(230, 230, 230))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(whereCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(selectAllCheckBox)
                                    .addComponent(whereComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(fromComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(equalRadioButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(whereCondititonTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(5, 5, 5)
                                .addComponent(likeRadioButton)))
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(selectColumnComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addButton)
                            .addComponent(generateSelectSqlButton))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(clearButton))
                        .addGap(31, 31, 31)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(insertComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel4)
                                .addComponent(jLabel5))
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(generateInsertSqlButton))
                        .addGap(43, 43, 43)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(86, 86, 86)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(executeButton)
                        .addGap(18, 18, 18)
                        .addComponent(refreshButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(deleteButton)))
                .addContainerGap(55, Short.MAX_VALUE))
        );

        whereComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "customer_id", "name","email","address" }));

        whereComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "order_id", "customer_id","book_id","quantity", "order_date" }));
        selectColumnComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "customer_id", "name","email","address"  }));

        selectColumnComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "order_id", "customer_id","book_id","quantity", "order_date" }));

        pack();
    }// </editor-fold>//GEN-END:initComponents

//Disable equal radio buttton when like button is selected
    private void likeRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_likeRadioButtonActionPerformed
        // TODO add your handling code here:
        boolean isSelected = likeRadioButton.isSelected();
        
        equalRadioButton.setEnabled(!isSelected);
    }//GEN-LAST:event_likeRadioButtonActionPerformed

    private void whereCondititonTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_whereCondititonTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_whereCondititonTextFieldActionPerformed

    //enable whereComboBox, equalradioButton, likeRadioButton and whereConditionTextField when whereCheckBox is clicked
    private void whereCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_whereCheckBoxActionPerformed
         // Get the state of the checkbox (selected or not)
    boolean isSelected = whereCheckBox.isSelected();

    // Enable or disable components based on whether the checkbox is selected
    whereComboBox.setEnabled(isSelected);
    equalRadioButton.setEnabled(isSelected);
    likeRadioButton.setEnabled(isSelected);
    whereCondititonTextField.setEnabled(isSelected);
    
    }//GEN-LAST:event_whereCheckBoxActionPerformed

    //When Application starts block all these components
    private void initializeComponents() {
    boolean isSelected = whereCheckBox.isSelected();

    // Set the initial enabled/disabled state based on the checkbox
    whereComboBox.setEnabled(isSelected);
    equalRadioButton.setEnabled(isSelected);
    likeRadioButton.setEnabled(isSelected);
    whereCondititonTextField.setEnabled(isSelected);
}
    
    //when add button is clicked these functions will happen
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
    
     // Get the selected column from the JComboBox
    String selectedColumn = selectColumnComboBox.getSelectedItem().toString();

    // Get the current text from the JTextArea
    String currentText = selectColumnName.getText();

    // Avoid adding duplicate columns
    if (currentText.contains(selectedColumn)) {
        JOptionPane.showMessageDialog(this, "Column already added.");
        return;
    }

    // Append a comma only if there are already columns in the JTextArea
    if (!currentText.isEmpty()) {
        currentText += ", ";
    }

    // Append the selected column
    currentText += selectedColumn;

    // Update the JTextArea with the new text
    selectColumnName.setText(currentText);
   
    }//GEN-LAST:event_addButtonActionPerformed

    //Clear the selectcolumnName text area
    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        // TODO add your handling code here:
        selectColumnName.setText("");
    }//GEN-LAST:event_clearButtonActionPerformed

    //when execute button is clicked the sql satements inside sql text area will occure
    private void executeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeButtonActionPerformed
        // TODO add your handling code here:
        String sql = sqlTextArea.getText();
    Connection conn = getConnection();
    try {
        Statement stmt = conn.createStatement();
        if (sql.trim().toUpperCase().startsWith("SELECT")) {
            ResultSet rs = stmt.executeQuery(sql);
            DefaultTableModel model = new DefaultTableModel();
            int columnCount = rs.getMetaData().getColumnCount();

            // Add column names to the model
            for (int i = 1; i <= columnCount; i++) {
                model.addColumn(rs.getMetaData().getColumnName(i));
            }

            // Add rows to the model
            while (rs.next()) {
                Object[] rowData = new Object[columnCount];
                for (int i = 0; i < columnCount; i++) {
                    rowData[i] = rs.getObject(i + 1);
                }
                model.addRow(rowData);
            }

            resultsTable.setModel(model);  // Set the model to the JTable
        } else {
            int rowsAffected = stmt.executeUpdate(sql);
            JOptionPane.showMessageDialog(this, rowsAffected + " row(s) affected.");
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "SQL Execution Error: " + e.getMessage());
    } finally {
        try {
            if (conn != null) conn.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    }//GEN-LAST:event_executeButtonActionPerformed

    
    //when generate sql button for select statement clicked this functions will works
    private void generateSelectSqlButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateSelectSqlButtonActionPerformed
        // TODO add your handling code here:
       
String from = "FROM " + fromComboBox.getSelectedItem();  // Table selection

    // Case 1: SELECT ALL without WHERE clause
    if (selectAllCheckBox.isSelected() && !whereCheckBox.isSelected()) {
        sqlTextArea.setText("SELECT * " + from + ";");
    
    // Case 2: SELECT ALL with WHERE clause
    } else if (selectAllCheckBox.isSelected() && whereCheckBox.isSelected()) {
        String whereClause = generateWhereClause();
        sqlTextArea.setText("SELECT * " + from + whereClause);
    
    // Case 3: Manually selected columns without WHERE clause
    } else if (!selectAllCheckBox.isSelected() && !whereCheckBox.isSelected()) {
        String columns = selectColumnName.getText().trim();  // Remove trailing comma
        if (columns.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select at least one column.");
            return;
        }
        sqlTextArea.setText("SELECT " + columns + " " + from + ";");
    
    // Case 4: Manually selected columns with WHERE clause
    } else if (!selectAllCheckBox.isSelected() && whereCheckBox.isSelected()) {
        String columns = selectColumnName.getText().trim();  // Remove trailing comma
        if (columns.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please select at least one column.");
            return;
        }
        String whereClause = generateWhereClause();
        sqlTextArea.setText("SELECT " + columns + " " + from + whereClause);
    }
    }//GEN-LAST:event_generateSelectSqlButtonActionPerformed

    //this code block contain the login for where clause
    private String generateWhereClause() {
    String whereClause;
    if (equalRadioButton.isSelected()) {
        whereClause = " WHERE " + whereComboBox.getSelectedItem() + " = '" + whereCondititonTextField.getText() + "'";
    } else {
        whereClause = " WHERE " + whereComboBox.getSelectedItem() + " LIKE '" + whereCondititonTextField.getText() + "%'";
    }
    return whereClause + ";";
}

    //when generateSql button for insert into sql steatement block clicked this function will work
    private void generateInsertSqlButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateInsertSqlButtonActionPerformed
        // TODO add your handling code here:
        String selectedTable = (String) insertComboBox.getSelectedItem();  // Get selected table
    DefaultTableModel columnModel = (DefaultTableModel) insertColumnTable.getModel();
    DefaultTableModel valueModel = (DefaultTableModel) insertValuesTable.getModel();

    StringBuilder columns = new StringBuilder();
    StringBuilder values = new StringBuilder();

    // Loop through each row in the insertColumnTable to gather columns and values
    for (int i = 0; i < columnModel.getRowCount(); i++) {
        String column = (String) columnModel.getValueAt(i, 0);  // Get the column name
        String value = (String) valueModel.getValueAt(i, 0);    // Get the value entered in the insertValuesTable

        if (value == null || value.trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Value for " + column + " cannot be empty.");
            return;  // Exit if any value is empty
        }

        // Add comma only if it's not the first column/value
        if (columns.length() > 0) {
            columns.append(", ");
            values.append(", ");
        }

        columns.append(column);
        values.append("\" " + value + "\" ");  // Wrap values in quotes for SQL syntax
    }

    // Generate the final INSERT INTO SQL statement
    String sql = "INSERT INTO " + selectedTable + " (" + columns.toString() + ") VALUES (" + values.toString() + ");";
    sqlTextArea.setText(sql);  // Display the generated SQL in the JTextArea
}

//logic for adding column names and vales for insert statement
private void generateInsertStatement() {
    StringBuilder columns = new StringBuilder();
    StringBuilder values = new StringBuilder();

    DefaultTableModel model = (DefaultTableModel) insertColumnTable.getModel();
    for (int i = 0; i < model.getRowCount(); i++) {
        String column = (String) model.getValueAt(i, 0);  // Column name
        String value = (String) model.getValueAt(i, 1);   // User-entered value

        if (!columns.isEmpty()) {
            columns.append(", ");
            values.append(", ");
        }

        columns.append(column);
        values.append("'" + value + "'");  // Assuming all inputs are treated as strings
    }

    String sql = "INSERT INTO " + insertComboBox.getSelectedItem() +
                 " (" + columns.toString() + ")" +
                 " VALUES (" + values.toString() + ")";
    sqlTextArea.setText(sql);

    }//GEN-LAST:event_generateInsertSqlButtonActionPerformed

//when insertComboBox is clicked this action will happen
    private void insertComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertComboBoxActionPerformed
        // TODO add your handling code here:
        insertComboBox.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        populateColumnTable();
    }
});


    }//GEN-LAST:event_insertComboBoxActionPerformed

    //When table name is selected fetch the column names from table
    private void populateColumnTable() {
     String selectedTable = (String) insertComboBox.getSelectedItem();  // Get selected table
    Connection conn = getConnection();  // Get database connection

    try {
        // Get metadata and column names
        DatabaseMetaData metaData = conn.getMetaData();
        ResultSet columns = metaData.getColumns(null, null, selectedTable, null);

        // Model for column names
        DefaultTableModel tableModelColumn = new DefaultTableModel();
        tableModelColumn.addColumn("Column");

        // Model for values input
        DefaultTableModel tableModelValues = new DefaultTableModel();
        tableModelValues.addColumn("Values");

        // Populate the column JTable with column names
        while (columns.next()) {
            String columnName = columns.getString("COLUMN_NAME");
            if (!columnName.equalsIgnoreCase("id")) {  // Exclude "id" column
                tableModelColumn.addRow(new Object[]{columnName});
                tableModelValues.addRow(new Object[]{""});  // Allow user input in corresponding row
            }
        }

        // Set the models to the column and value tables
        insertColumnTable.setModel(tableModelColumn);
        insertValuesTable.setModel(tableModelValues);

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error fetching columns: " + e.getMessage());
    } finally {
        try {
            if (conn != null) conn.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
}
    
    //When select all checkbox is clicked disable selectColumnComboBox and add button
    private void selectAllCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllCheckBoxActionPerformed
        boolean isSelected = selectAllCheckBox.isSelected();

    // Enable/disable the column JTable and Add button
    selectColumnComboBox.setEnabled(!isSelected);  // JTable for selecting columns
    addButton.setEnabled(!isSelected);          // Add button to add columns

    if (isSelected) {
        // Generate SELECT * query if Select All is checked

    } else {
        // Clear the SQL TextArea for manual column selection
        sqlTextArea.setText("SELECT FROM " + insertComboBox.getSelectedItem() + ";");
    }
    }//GEN-LAST:event_selectAllCheckBoxActionPerformed

    //When equal radio button is cliked disable like radio button
    private void equalRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equalRadioButtonActionPerformed
        // TODO add your handling code here:
        boolean isSelected = equalRadioButton.isSelected();
        
        likeRadioButton.setEnabled(!isSelected);
    }//GEN-LAST:event_equalRadioButtonActionPerformed

    
    //When refresh button is clicked get the latest table from database
    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        // TODO add your handling code here:
    refreshButton.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        refreshResultTable(evt);
    }
});
        
        
    }//GEN-LAST:event_refreshButtonActionPerformed

    
    //delete a record from table
    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        // TODO add your handling code here:
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            deleteButtonActionPerformed(evt);  // Recursively calling the same method is unnecessary
        }
    });

    // Get the selected row index from the resultsTable
    int selectedRow = resultsTable.getSelectedRow();

    // Check if a row is selected
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a row to delete.");
        return;
    }

    // Get the primary key value (id) from the first column
    Object primaryKeyValue = resultsTable.getValueAt(selectedRow, 0);

    int primaryKey;  // Variable to store the primary key as an int

    // Safely convert the primary key value to an int
    if (primaryKeyValue instanceof Long) {
        primaryKey = ((Long) primaryKeyValue).intValue();  // Convert Long to int
    } else if (primaryKeyValue instanceof Integer) {
        primaryKey = (Integer) primaryKeyValue;  // Cast Integer to int
    } else {
        JOptionPane.showMessageDialog(this, "Unexpected data type for primary key.");
        return;
    }

    // Confirm deletion with the user
    int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this record?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
    if (confirm == JOptionPane.YES_OPTION) {
        // Perform the deletion from the database
        String selectedTable = (String) insertComboBox.getSelectedItem();  // Get the selected table
        deleteRowFromDatabase(selectedTable, primaryKey);

        // Remove the row from the resultsTable
        DefaultTableModel model = (DefaultTableModel) resultsTable.getModel();
        model.removeRow(selectedRow);

        // Optionally, refresh the table after deletion
        refreshResultTable(evt);
    }

    }//GEN-LAST:event_deleteButtonActionPerformed

    private void whereComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_whereComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_whereComboBoxActionPerformed

    private void fromComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromComboBoxActionPerformed
        // TODO add your handling code here:
        fromComboBox.addActionListener(new java.awt.event.ActionListener() {
    public void actionPerformed(java.awt.event.ActionEvent evt) {
        populateComboBoxesWithColumns();
    }
});
    }//GEN-LAST:event_fromComboBoxActionPerformed
    private void populateComboBoxesWithColumns() {
    String selectedTable = (String) fromComboBox.getSelectedItem();  // Get selected table name
    Connection conn = getConnection();  // Establish database connection

    try {
        // Get metadata for the selected table
        DatabaseMetaData metaData = conn.getMetaData();
        ResultSet columns = metaData.getColumns(null, null, selectedTable, null);

        // Clear existing items in the combo boxes
        whereComboBox.removeAllItems();
        selectColumnComboBox.removeAllItems();

        // Populate combo boxes with column names
        while (columns.next()) {
            String columnName = columns.getString("COLUMN_NAME");
            whereComboBox.addItem(columnName);
            selectColumnComboBox.addItem(columnName);
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error fetching column names: " + e.getMessage());
    } finally {
        try {
            if (conn != null) conn.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
}

    
    private void deleteRowFromDatabase(String selectedTable, int primaryKeyValue) {
    Connection conn = getConnection();  // Get database connection
    try {
        // Get the primary key column for the selected table
        String primaryKeyColumn = getPrimaryKeyColumn(selectedTable);

        // Create the DELETE SQL query using the primary key column
        String deleteQuery = "DELETE FROM " + selectedTable + " WHERE " + primaryKeyColumn + " = ?";
        
        PreparedStatement stmt = conn.prepareStatement(deleteQuery);
        stmt.setInt(1, primaryKeyValue);  // Set the primary key value for deletion

        // Execute the DELETE query
        int rowsAffected = stmt.executeUpdate();

        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(this, "Record deleted successfully.");
        } else {
            JOptionPane.showMessageDialog(this, "Error: Record not found or could not be deleted.");
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error deleting record: " + e.getMessage());
    } finally {
        try {
            if (conn != null) conn.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
}
    
    private String getPrimaryKeyColumn(String selectedTable) {
    Connection conn = getConnection();
    String primaryKeyColumn = null;
    try {
        // Retrieve metadata for the selected table
        DatabaseMetaData metaData = conn.getMetaData();
        ResultSet pkColumns = metaData.getPrimaryKeys(null, null, selectedTable);

        // If a primary key exists, return the first column in the primary key
        if (pkColumns.next()) {
            primaryKeyColumn = pkColumns.getString("COLUMN_NAME");
        }

        // If no primary key is found, handle it accordingly (e.g., show an error message)
        if (primaryKeyColumn == null) {
            JOptionPane.showMessageDialog(this, "No primary key found for table: " + selectedTable);
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error fetching primary key: " + e.getMessage());
    } finally {
        try {
            if (conn != null) conn.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
    return primaryKeyColumn;
}
    
    private void refreshResultTable(java.awt.event.ActionEvent evt) {
     String selectedTable = (String) insertComboBox.getSelectedItem();  // Get selected table
    String query = generateSelectQuery(selectedTable);  // Generate the SELECT query based on the current settings

    // Clear the existing data in the resultTable
    DefaultTableModel model = (DefaultTableModel) resultsTable.getModel();
    model.setRowCount(0);  // This clears the resultTable
    
    // Fetch new data and update the resultTable
    fetchAndUpdateResultTable(query);
}
    
    private String generateSelectQuery(String selectedTable) {
    // Get the selected columns (if not "SELECT *")
    String selectedColumns = selectColumnName.getText().trim();  // Use selectColumnName (JTextArea) to get selected columns
    if (selectedColumns.isEmpty()) {
        selectedColumns = "*";  // If no columns selected, default to SELECT *
    }

    // Check for WHERE clause if enabled
    String whereClause = "";
    if (whereCheckBox.isSelected()) {
        whereClause = generateWhereClause();  // Assume generateWhereClause() handles the WHERE condition
    }

    return "SELECT " + selectedColumns + " FROM " + selectedTable + " " + whereClause;
}
    
    private void fetchAndUpdateResultTable(String query) {
    Connection conn = getConnection();  // Get database connection
    try {
        Statement stmt = conn.createStatement();
        ResultSet rs = stmt.executeQuery(query);

        // Get the metadata to determine column names
        ResultSetMetaData metaData = rs.getMetaData();
        int columnCount = metaData.getColumnCount();

        // Create the table model dynamically based on the columns from the query
        DefaultTableModel model = new DefaultTableModel();

        // Add column names to the model
        for (int i = 1; i <= columnCount; i++) {
            model.addColumn(metaData.getColumnName(i));
        }

        // Add rows to the model
        while (rs.next()) {
            Object[] rowData = new Object[columnCount];
            for (int i = 1; i <= columnCount; i++) {
                rowData[i - 1] = rs.getObject(i);
            }
            model.addRow(rowData);
        }

        // Set the model to the resultTable
        resultsTable.setModel(model);

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error fetching data: " + e.getMessage());
    } finally {
        try {
            if (conn != null) conn.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }
}
    //Data base connection
    public Connection getConnection() {
    Connection conn = null;
    try {
        String url = "jdbc:mysql://localhost:3306/customersdb";  // Database URL
        String user = "root";                                    // Database username
        String password = "Vig@0702";                       // Database password

        conn = DriverManager.getConnection(url, user, password);
        System.out.println("Connection established successfully.");
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "Database connection error: " + e.getMessage());
    }
    return conn;
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SqlGeneratorForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SqlGeneratorForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SqlGeneratorForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SqlGeneratorForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SqlGeneratorForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JRadioButton equalRadioButton;
    private javax.swing.JButton executeButton;
    private javax.swing.JComboBox<String> fromComboBox;
    private javax.swing.JButton generateInsertSqlButton;
    private javax.swing.JButton generateSelectSqlButton;
    private javax.swing.JTable insertColumnTable;
    private javax.swing.JComboBox<String> insertComboBox;
    private javax.swing.JTable insertValuesTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JRadioButton likeRadioButton;
    private javax.swing.JButton refreshButton;
    private javax.swing.JTable resultsTable;
    private javax.swing.JCheckBox selectAllCheckBox;
    private javax.swing.JComboBox<String> selectColumnComboBox;
    private javax.swing.JTextArea selectColumnName;
    private javax.swing.JTextArea sqlTextArea;
    private javax.swing.JCheckBox whereCheckBox;
    private javax.swing.JComboBox<String> whereComboBox;
    private javax.swing.JTextField whereCondititonTextField;
    // End of variables declaration//GEN-END:variables
}
